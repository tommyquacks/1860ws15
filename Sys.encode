function Sys.encode 0
    // Save the input
    @SP
    AM=M-1  // SP--, point to input
    D=M     // D = input
    @SP
    A=M
    M=D     // Keep input on stack

    // Compute parity of the 15 right-most bits
    call Sys.computeParity 1

    // Pop parity
    @SP
    AM=M-1  // SP--, point to parity
    D=M     // D = parity
    @SET_BIT
    D;JNE   // If parity == 1, jump to set bit

    // Clear bit 15: input & (-32769)
    @32768
    D=A
    D=-D    // D = -32768 (1111111111111111 in 2's complement)
    @SP
    AM=M-1  // SP--, point to input
    D=M&D   // D = input & (-32768)
    @SP
    A=M
    M=D     // Push result
    @SP
    M=M+1   // SP++
    @END
    0;JMP

(SET_BIT)
    // Set bit 15: input | 32768
    @32768
    D=A     // D = 32768 (1000000000000000)
    @SP
    AM=M-1  // SP--, point to input
    D=M|D   // D = input | 32768
    @SP
    A=M
    M=D     // Push result
    @SP
    M=M+1   // SP++

(END)
    return
